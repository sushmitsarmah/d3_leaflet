<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <link rel="stylesheet" type="text/css" href="libs/leaflet/dist/leaflet.css">
    <link rel="stylesheet" type="text/css" href="libs/draggable/styles/jquery.dialog.min.css">
    <link rel='stylesheet' href='/stylesheets/style.css' />
  </head>
  <body>
  <button id="show-dialog">Show Dialog</button>
  <div id='map'></div>


  <script type="text/javascript" src='libs/jquery/dist/jquery.min.js'></script>
  <script type="text/javascript" src='libs/draggable/scripts/jquery.dialog.js'></script>
  <script type="text/javascript" src='libs/leaflet/dist/leaflet.js'></script>
  <script type="text/javascript" src='libs/d3/d3.min.js'></script>
  <script type="text/javascript" src='libs/underscore/underscore-min.js'></script>
  <script type="text/javascript">

	// add an OpenStreetMap tile layer
	var thunderforest = L.tileLayer('http://{s}.tile.thunderforest.com/landscape/{z}/{x}/{y}.png', { attribution: '&copy; <a href="http://thunderforest.com/copyright">ThunderForest</a> contributors'
	});

	var openstreet = L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', { attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
	});	

	// create a map in the "map" div, set the view to a given place and zoom
	// var map = L.map('map').setView([46.64, -94.83], 10);
	var map = L.map('map', {
		center: [46.64, -94.83],
		zoom: 4,
		layers: [thunderforest,openstreet]
	});

	var baseMaps = {
	    "ThunderForest": thunderforest,
	    "OpenStreetMap": openstreet
	};

	var point = L.point(20, 20);

	var myIcon = L.divIcon({className:'circle', iconSize:point});

	var datachart;

	var parseDate = d3.time.format("%Y%m%d").parse;

	d3.tsv("data/data.tsv", function(d){
		d.date = parseDate(d.date);
		return d;
	}, function(error, data) {
		datachart = data;
	});

	//Load cellular data
  	d3.csv('data/cellular.csv',function(d){

  		['LAT_DMS','LON_DMS'].forEach(function(dms){
  			d[dms] = d[dms].split(',')
  					.reduce(function(a,b,i){
  						b = i == 1 ? b/60 : b/3600;
  						return +a+b;
  					});
  		});

  		d.LAT_DMS *= d.LATDIR == 'S' ? -1:1;
  		d.LON_DMS *= d.LONDIR == 'W' ? -1:1; 
  		d.SUPSTRUC = +d.SUPSTRUC;
  		d.ALLSTRUC = +d.ALLSTRUC;

  		return d;					

  	}, function(err,data){

  		// data = data.slice(0,100);
  		// add a marker in the given location, attach some popup content to it and open the popup
  		var licensees = _.uniq(_.pluck(data,'LICENSEE')),
  			overlays = {};

  		licensees.forEach(function(lic){
  			var layerGroup = [],
  				temp_data = data.filter(function(d){
  					return d.LICENSEE == lic;
  				});

	  		temp_data.forEach(function(d){
				layerGroup.push( L.marker([d.LAT_DMS, d.LON_DMS], {icon: myIcon}).bindPopup(d.LOCADD+','+d.LOCCITY+','+d.LOCCOUNTY).on('click', clickMarker) );
	  		});

	  		var group = L.layerGroup(layerGroup);

	  		overlays[lic] = group;

  		});

  		L.control.layers(baseMaps, overlays).addTo(map);


  	});

	function clickMarker(e){

		$('#dialog-layout').fadeOut('slow',function(){
			$('#dialog-mask').remove();
			$(this).removeClass('dialog-layout-animate').empty().remove();
		});	

		// var container = document.createElement("div");
		var container = d3chart(datachart)

	  	// var svg = d3.select(container)
	  	// 			.append('svg')
	  	// 			.attr({'width':'200px','height':'400px'})
	  	// 			.append('rect')
	  	// 			.attr({'x':'20px','y':'20px',
	  	// 					'width':'150px',
	  	// 					'height':'100px',
	  	// 					'fill':'#ef3456'});

		$.dialog({
			mask:false,
			height:'auto',
			width:'600',
			title:'D3 Charts',
			html:container,
			callback:function(){
				console.log('CALLBACKS')
			}
		});

		$('#dialog-close').on('click',function(e){
			$('#dialog-layout').fadeOut('slow',function(){
				$('#dialog-mask').remove();
				$(this).removeClass('dialog-layout-animate').empty().remove();
			});				
		});

	}

	function d3chart(data,container){

		var container = document.createElement("div");

		var margin = {top: 20, right: 80, bottom: 30, left: 50},
		    width = 570 - margin.left - margin.right,
		    height = 300 - margin.top - margin.bottom;

		

		var x = d3.time.scale()
		    .range([0, width]);

		var y = d3.scale.linear()
		    .range([height, 0]);

		var color = d3.scale.category10();

		var xAxis = d3.svg.axis()
		    .scale(x)
		    .tickFormat(d3.time.format('%m/%y'))
		    .orient("bottom");

		var yAxis = d3.svg.axis()
		    .scale(y)
		    .orient("left");

		var line = d3.svg.line()
		    .interpolate("basis")
		    .x(function(d) { return x(d.date); })
		    .y(function(d) { return y(d.temperature); });

		var svg = d3.select(container).append("svg")
		    .attr("width", width + margin.left + margin.right)
		    .attr("height", height + margin.top + margin.bottom)
		  .append("g")
		    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

		
		  color.domain(d3.keys(data[0]).filter(function(key) { return key !== "date"; }));

		  // data.forEach(function(d) {
		  //   d.date = parseDate(d.date);
		  // });

		  var cities = color.domain().map(function(name) {
		    return {
		      name: name,
		      values: data.map(function(d) {
		        return {date: d.date, temperature: +d[name]};
		      })
		    };
		  });

		  x.domain(d3.extent(data, function(d) { return d.date; }));

		  y.domain([
		    d3.min(cities, function(c) { return d3.min(c.values, function(v) { return v.temperature; }); }),
		    d3.max(cities, function(c) { return d3.max(c.values, function(v) { return v.temperature; }); })
		  ]);

		  svg.append("g")
		      .attr("class", "x axis")
		      .attr("transform", "translate(0," + height + ")")
		      .call(xAxis);

		  svg.append("g")
		      .attr("class", "y axis")
		      .call(yAxis)
		    .append("text")
		      .attr("transform", "rotate(-90)")
		      .attr("y", 6)
		      .attr("dy", ".71em")
		      .style("text-anchor", "end")
		      .text("Values");

		  var city = svg.selectAll(".city")
		      .data(cities)
		    .enter().append("g")
		      .attr("class", "city");

		  city.append("path")
		      .attr("class", "line")
		      .attr("d", function(d) { return line(d.values); })
		      .style("stroke", function(d) { return color(d.name); });

		  city.append("text")
		      .datum(function(d) { return {name: d.name, value: d.values[d.values.length - 1]}; })
		      .attr("transform", function(d) { return "translate(" + x(d.value.date) + "," + y(d.value.temperature) + ")"; })
		      .attr("x", 3)
		      .attr("dy", ".35em")
		      .attr('font-size','10px')
		      .text(function(d) { return d.name; });

		  return container;

	}



  </script>

  </body>
</html>